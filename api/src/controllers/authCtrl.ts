import { Request, Response } from 'express'
import bcrypt from 'bcrypt'
import { Prisma, PrismaClient } from '@prisma/client'

//for session
declare module 'express-session' {
    interface SessionData {
        userId: string
        userEmail: string
    }
}

//PRISMA
const prisma = new PrismaClient()

//////////
//REGISTER controller
//////////

export const register = async (req: Request, res: Response) => {
    try {
        //hash password and create user object
        const hashedUserPassord = await bcrypt.hash(req.body.userPassword, 12)

        //try to create user with data from body(convert email to lowercase and remove trailling spaces)
        await prisma.user.create({
            data: {
                userEmail: req.body.userEmail.toLowerCase().trim(),
                userPassword: hashedUserPassord,
            },
        })

        //response to client
        res.status(203).json({
            message: 'User was succesfully created',
        })
    } catch (e) {
        //if error is generated by database
        if (e instanceof Prisma.PrismaClientKnownRequestError) {
            return res.status(422).json({
                message: 'Error. Please check email/password requierments',
            })
        }
        //response sent to client
        res.status(422).json({
            message: 'Server error, please try again',
        })
    }
}

///////
//LOGIN controller
///////

export const login = async (req: Request, res: Response) => {
    //check if there is a session already

    //basic check the body fields are not empty
    if (req.body.userEmail == '' || req.body.userPassword == '') {
        return res.json({ message: 'Please fill all the fields' })
    }

    try {
        //search for user in database
        const matchedUser = await prisma.user.findUnique({
            where: { userEmail: req.body.userEmail.toLowerCase().trim() },
        })

        //check password
        if (matchedUser) {
            const matchedPaswsord = await bcrypt.compare(
                req.body.userPassword,
                matchedUser.userPassword
            )
            //if data is correct create session object
            if (matchedPaswsord) {
                req.session.userId = matchedUser.id
                req.session.userEmail = matchedUser.userEmail
                res.status(200).json({ message: 'Authentication success' })
            } else {
                res.status(400).json({
                    message: 'User/password incorrect combination.',
                })
            }
        } else {
            res.status(400).json({
                message: 'User/password incorrect combination.',
            })
        }
    } catch (error) {
        res.status(500).json({ message: 'There was a server error' })
        console.log(error)
    }
}
